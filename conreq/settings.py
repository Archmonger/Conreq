"""
Django settings for Conreq project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
import os
import secrets
import sys

from django.core.management.utils import get_random_secret_key
from tzlocal import get_localzone

from conreq.utils.generic import (
    get_base_url,
    get_bool_from_env,
    get_database_type,
    get_debug_from_env,
    get_str_from_env,
    list_modules,
)

# Environment and Project Variables
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_DIR = get_str_from_env("DATA_DIR", os.path.join(BASE_DIR, "data"))
CORE_DIR = os.path.join(BASE_DIR, "conreq", "core")
APPS_DIR = os.path.join(DATA_DIR, "apps")
MEDIA_DIR = os.path.join(DATA_DIR, "media")
USER_STATICFILES_DIR = os.path.join(DATA_DIR, "static")
LOG_DIR = os.path.join(DATA_DIR, "logs")
DEBUG = get_debug_from_env()
DB_ENGINE = get_database_type()
MYSQL_CONFIG_FILE = get_str_from_env("MYSQL_CONFIG_FILE", "")
SSL_SECURITY = get_bool_from_env("SSL_SECURITY", False)
PWNED_VALIDATOR = get_bool_from_env("PWNED_VALIDATOR", True)
X_FRAME_OPTIONS = get_str_from_env("X_FRAME_OPTIONS", "DENY")
ALLOWED_HOST = get_str_from_env("ALLOWED_HOST", "*")
BASE_URL = get_base_url()


# Application Settings
DJVERSION_VERSION = "0.20.2"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
SILKY_AUTHENTICATION = True
SILKY_AUTHORISATION = True
SILKY_ANALYZE_QUERIES = True
SILKY_PYTHON_PROFILER = True
SILKY_PYTHON_PROFILER_BINARY = True
SILKY_PYTHON_PROFILER_RESULT_PATH = os.path.join(DATA_DIR, "metrics")
HTML_MINIFY = True
WHITENOISE_MAX_AGE = 31536000 if not DEBUG else 0
COMPRESS_OUTPUT_DIR = "minified"
COMPRESS_OFFLINE = True
COMPRESS_STORAGE = "compressor.storage.BrotliCompressorFileStorage"
COMPRESS_FILTERS = {
    "css": ["compressor.filters.cssmin.rCSSMinFilter"],
    "js": ["compressor.filters.jsmin.JSMinFilter"],
}
HUEY_FILENAME = os.path.join(DATA_DIR, "bg_tasks.sqlite3")
HUEY = {
    "name": "huey",  # DB name for huey.
    "huey_class": "huey.SqliteHuey",  # Huey implementation to use.
    "filename": HUEY_FILENAME,  # Sqlite filename
    "timeout": 3,  # 3 second query timeout
    "results": False,  # Do not store return values of tasks.
    "immediate": False,  # If True, run tasks synchronously.
    "strict_fifo": True,
    "consumer": {
        "workers": 20,
    },
}


# Directory Structure Creation
try:
    if not os.path.exists(APPS_DIR):
        os.makedirs(APPS_DIR)
    if not os.path.exists(USER_STATICFILES_DIR):
        os.makedirs(USER_STATICFILES_DIR)
    if not os.path.exists(MEDIA_DIR):
        os.makedirs(MEDIA_DIR)
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    if not os.path.exists(SILKY_PYTHON_PROFILER_RESULT_PATH) and DEBUG:
        os.makedirs(SILKY_PYTHON_PROFILER_RESULT_PATH)
except:
    pass


# Email Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = get_bool_from_env("EMAIL_USE_TLS", True)
EMAIL_PORT = get_str_from_env("EMAIL_PORT", "")
EMAIL_HOST = get_str_from_env("EMAIL_HOST", "")
EMAIL_HOST_USER = get_str_from_env("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = get_str_from_env("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# PWA
PWA_APP_NAME = get_str_from_env("APP_NAME", "Conreq")
PWA_APP_DESCRIPTION = get_str_from_env("APP_DESCRIPTION", "Content Requesting")
PWA_APP_THEME_COLOR = "#3fcfa6"
PWA_APP_BACKGROUND_COLOR = "#04110d"
PWA_APP_ICONS = [
    {
        "src": BASE_URL + "/static/icons/standard.png",
        "sizes": "512x512",
        "purpose": "any",
    },
    {
        "src": BASE_URL + "/static/icons/maskable.png",
        "sizes": "512x512",
        "purpose": "maskable",
    },
]
PWA_APP_ICONS_APPLE = [
    {"src": BASE_URL + "/static/icons/apple-touch-icon.png", "sizes": "180x180"}
]
PWA_APP_SPLASH_SCREEN = []
PWA_APP_START_URL = BASE_URL + "/"
PWA_APP_SCOPE = PWA_APP_START_URL
PWA_APP_DEBUG_MODE = DEBUG


# Logging
CONREQ_LOG_FILE = os.path.join(LOG_DIR, "conreq.log")
ACCESS_LOG_FILE = os.path.join(LOG_DIR, "access.log")
if DEBUG:
    LOG_LEVEL = get_str_from_env("LOG_LEVEL", "INFO")
else:
    LOG_LEVEL = get_str_from_env("LOG_LEVEL", "WARNING")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "main": {
            "format": "%(asctime)s %(levelname)s %(name)s: %(message)s",
        },
        "minimal": {
            "format": "%(levelname)s %(name)s: %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "minimal",
        },
        "conreq_logs": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "main",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
            "encoding": "utf-8",
            "filename": CONREQ_LOG_FILE,
        },
    },
    "loggers": {
        "django": {
            "level": LOG_LEVEL,
        },
        "hypercorn": {
            "level": LOG_LEVEL,
        },
        "conreq": {
            "level": LOG_LEVEL,
        },
        "huey": {
            "level": LOG_LEVEL,
        },
    },
}
for logger in LOGGING["loggers"]:
    LOGGING["loggers"][logger]["handlers"] = ["console", "conreq_logs"]


# Security Settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "no-referrer"
ALLOWED_HOSTS = [ALLOWED_HOST]
SECURE_BROWSER_XSS_FILTER = True
if SSL_SECURITY:
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
    SECURE_HSTS_PRELOAD = True  # Allow for HSTS preload
    SECURE_HSTS_SECONDS = 31536000  # Allow for HSTS preload
    SESSION_COOKIE_SECURE = True  # Only send cookie over HTTPS
    CSRF_COOKIE_SECURE = True  # Only send cookie over HTTPS
    LANGUAGE_COOKIE_SECURE = True  # Only send cookie over HTTPS
    LANGUAGE_COOKIE_HTTPONLY = True  # Do not allow JS to access cookie


# API Settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "conreq.core.api.permissions.HasAPIKey",
    ],
}


# External "settings.json" file
SETTINGS_FILE = os.path.join(DATA_DIR, "settings.json")
ORIGINAL_SETTINGS = None
if not os.path.exists(SETTINGS_FILE):
    with open(SETTINGS_FILE, "w") as settings_file:
        settings_file.write("{}")
with open(SETTINGS_FILE, "r+") as settings_file:
    # Read the file
    settings = json.load(settings_file)
    ORIGINAL_SETTINGS = settings.copy()
    # Obtain the DB Encryption Key from the file
    if settings.get("DB_ENCRYPTION_KEY"):
        FIELD_ENCRYPTION_KEYS = [settings["DB_ENCRYPTION_KEY"]]
    else:
        # DB Encryption Key wasn't found, a new one is needed
        FIELD_ENCRYPTION_KEYS = [secrets.token_hex(32)]
        settings["DB_ENCRYPTION_KEY"] = FIELD_ENCRYPTION_KEYS[0]
    # Obtain the Secret Key from the file
    if settings.get("SECRET_KEY"):
        SECRET_KEY = settings["SECRET_KEY"]
    else:
        # New secret key is needed
        SECRET_KEY = get_random_secret_key()
        settings["SECRET_KEY"] = SECRET_KEY
# Save settings.json if needed
if ORIGINAL_SETTINGS != settings:
    with open(SETTINGS_FILE, "w") as settings_file:
        if DEBUG:
            print("Updating settings.json to ", settings)
        settings_file.write(json.dumps(settings))


# Django Apps & Middleware
sys.path.append(APPS_DIR)  # User Installed Apps
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    *list_modules(CORE_DIR, prefix="conreq.core."),
    "channels",  # Websocket library
    "encrypted_fields",  # Allow for encrypted text in the DB
    "solo",  # Allow for single-row fields in the DB
    "django_cleanup.apps.CleanupConfig",  # Automatically delete old image files
    "djversion",  # Obtains the git commit as a version number
    "huey.contrib.djhuey",  # Queuing background tasks
    "compressor",  # Minifies CSS/JS files
    "url_or_relative_url_field",  # Validates relative URLs
    "rest_framework",  # OpenAPI Framework
    "rest_framework_api_key",  # API Key Manager
    "rest_framework.authtoken",  # API User Authentication
    *list_modules(APPS_DIR),  # User Installed Apps
]
MIDDLEWARE = [
    "compression_middleware.middleware.CompressionMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serve static files through Django securely
    "django.middleware.gzip.GZipMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "htmlmin.middleware.HtmlMinifyMiddleware",  # Compresses HTML files
    "htmlmin.middleware.MarkRequestMiddleware",  # Marks the request as minified
]


# Enabling apps/middleware based on flags
if X_FRAME_OPTIONS.lower() != "false" and not DEBUG:
    # Block embedding conreq
    MIDDLEWARE.append("django.middleware.clickjacking.XFrameOptionsMiddleware")
if DEBUG:
    # Performance analysis tools
    INSTALLED_APPS.append("silk")
    MIDDLEWARE.append("silk.middleware.SilkyMiddleware")
    # API docs generator
    INSTALLED_APPS.append("drf_yasg")


# URL Routing and Page Rendering
ROOT_URLCONF = "conreq.urls"
ASGI_APPLICATION = "conreq.asgi.application"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# Databases
if DB_ENGINE == "MYSQL" and MYSQL_CONFIG_FILE != "":
    # MySQL
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "OPTIONS": {
                "read_default_file": MYSQL_CONFIG_FILE,
            },
        }
    }
else:
    # SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(DATA_DIR, "db.sqlite3"),
            "OPTIONS": {
                "timeout": 3,  # 3 second query timeout
            },
        }
    }
CACHES = {
    "default": {
        "BACKEND": "diskcache.DjangoCache",
        "LOCATION": os.path.join(DATA_DIR, "cache"),
        "TIMEOUT": 300,  # Django setting for default timeout of each key.
        "SHARDS": 8,  # Number of "sharded" cache dbs to create
        "DATABASE_TIMEOUT": 0.25,  # 250 milliseconds
        "OPTIONS": {"size_limit": 2 ** 30},  # 1 gigabyte
    }
}


# User Authenticaiton
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
LOGIN_REDIRECT_URL = "base:index"
LOGIN_URL = "sign_in"
if PWNED_VALIDATOR:
    AUTH_PASSWORD_VALIDATORS.append(
        {
            "NAME": "pwned_passwords_django.validators.PwnedPasswordsValidator",
            "OPTIONS": {
                "error_message": "Cannot use a compromised password. This password was detected %(amount)d time(s) on 'haveibeenpwned.com'.",
                "help_message": "Your password can't be a compromised password.",
            },
        },
    )

# Internationalization
LANGUAGE_CODE = "en-US"
TIME_ZONE = get_localzone().zone
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static Files (CSS, JavaScript, Images)
STATIC_ROOT = os.path.join(BASE_DIR, "collectstatic")
STATIC_URL = BASE_URL + "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "conreq", "static"),
    USER_STATICFILES_DIR,
]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "media/"
