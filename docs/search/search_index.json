{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Conreq Documentation \u00b6 Conreq is an extensible web platform built around Django . Read through the docs to learn how to set up Conreq, or how to contribute to the Conreq repository! Want to join the community or have a question? Chat with us on Discord or create a post on GitHub Discussions ! Communities \u00b6 Discord Reddit GitHub Discussions","title":"Home"},{"location":"#welcome-to-the-conreq-documentation","text":"Conreq is an extensible web platform built around Django . Read through the docs to learn how to set up Conreq, or how to contribute to the Conreq repository! Want to join the community or have a question? Chat with us on Discord or create a post on GitHub Discussions !","title":"Welcome to the Conreq Documentation"},{"location":"#communities","text":"Discord Reddit GitHub Discussions","title":"Communities"},{"location":"configure/env_vars/","text":"Environment variables can be used to customize core Conreq features at boot. If running outside of docker, the method of setting environment variables will vary based on operating system . For Unraid Docker installations, this will be done by clicking Add another Path, Port, Variable, Label, or Device through a docker's Edit menu, and then selecting a Config Type of Variable . For regular docker installations, you can use the -e parameter, such as docker run -e 'DB_ENGINE'='MYSQL' -e 'MYSQL_CONFIG_FILE'='/config/mysql.cnf . If using Docker Compose, see the relevant documentation . Available Variables \u00b6 # General Settings BASE_URL = \"requests\" # default: None APP_NAME = \"RequestCentral\" # default: Conreq APP_DESCRIPTION = \"Get yo stuff!\" # default: Content Requesting ARR_REFRESH_INTERNAL = \"*/15\" # default: */1 (Cron minutes for Sonarr/Radarr library refresh) LOG_LEVEL = \"ERROR\" # default: WARNING CONREQ_ENV_PREFIX = \"CONREQ\" # default: None (Prefix for all these environment variables) # Data Storage DATA_DIR = \"/example/directory\" # default: /config (Defaults to \"data/\" outside of docker) DB_ENGINE = \"MYSQL\" # default: SQLITE3 MYSQL_CONFIG_FILE = \"/config/mysql.cnf\" # default: None # Security SSL_SECURITY = \"True\" # default: False (True enables advanced SSL security features) PWNED_VALIDATOR = \"False\" # default: True (False disables checking for compromised passwords) X_FRAME_OPTIONS = \"SAMEORIGIN\" # default: DENY (False disables X-Frame-Options) ALLOWED_HOST = \"192.168.0.199\" # default: * (Allows all hosts) DEBUG = \"False\" # default: False (Disable security features, only enable this during development. Defaults to True outside of docker.) # Email EMAIL_USE_TLS = \"False\" # default: True EMAIL_PORT = \"587\" # default: None EMAIL_HOST = \"smtp.gmail.com\" # default: None EMAIL_HOST_USER = \"myself@gmail.com\" # default: None EMAIL_HOST_PASSWORD = \"dogmemes123\" # default: None","title":"Environment Variables"},{"location":"configure/env_vars/#available-variables","text":"# General Settings BASE_URL = \"requests\" # default: None APP_NAME = \"RequestCentral\" # default: Conreq APP_DESCRIPTION = \"Get yo stuff!\" # default: Content Requesting ARR_REFRESH_INTERNAL = \"*/15\" # default: */1 (Cron minutes for Sonarr/Radarr library refresh) LOG_LEVEL = \"ERROR\" # default: WARNING CONREQ_ENV_PREFIX = \"CONREQ\" # default: None (Prefix for all these environment variables) # Data Storage DATA_DIR = \"/example/directory\" # default: /config (Defaults to \"data/\" outside of docker) DB_ENGINE = \"MYSQL\" # default: SQLITE3 MYSQL_CONFIG_FILE = \"/config/mysql.cnf\" # default: None # Security SSL_SECURITY = \"True\" # default: False (True enables advanced SSL security features) PWNED_VALIDATOR = \"False\" # default: True (False disables checking for compromised passwords) X_FRAME_OPTIONS = \"SAMEORIGIN\" # default: DENY (False disables X-Frame-Options) ALLOWED_HOST = \"192.168.0.199\" # default: * (Allows all hosts) DEBUG = \"False\" # default: False (Disable security features, only enable this during development. Defaults to True outside of docker.) # Email EMAIL_USE_TLS = \"False\" # default: True EMAIL_PORT = \"587\" # default: None EMAIL_HOST = \"smtp.gmail.com\" # default: None EMAIL_HOST_USER = \"myself@gmail.com\" # default: None EMAIL_HOST_PASSWORD = \"dogmemes123\" # default: None","title":"Available Variables"},{"location":"configure/mysql/","text":"Set up a MySQL database (ex. a MySQL Docker) Create a file within your Conreq data directory create a MySQL configuration file (ex. mysql.cnf ). At minimum you must include the following... [ client ] database = conreq user = db_username password = db_password host = 192 . 168 . 86 . 200 default - character - set = utf8 Take a look at MySQL's cnf docs for all available parameters. Set your DB_ENGINE variable to MYSQL and your MYSQL_CONFIG_FILE variable to the path to your cnf file (ex. /config/mysql.cnf ). If using Unraid/Docker, add this as a Docker variable. Otherwise, search \"How to set environment variables in ... Windows 10\"","title":"MySQL Database"},{"location":"configure/organizr/","text":"Set your X_FRAME_OPTIONS variable to false. If using Unraid/Docker, set this using a Docker Variable. If manually running Conreq, the method of setting environment variables will vary based on operating system . Go to Server Settings within Conreq and enable Organizr User Authentication Set up a Nginx reverse proxy. If you need help with this, join the Organizr Discord and post in #groups. In your Conreq block, add the following... # Sets Conreq to be accessible by all Organizr users. Google \"Organizr ServerAuth\" for more details. auth_request /auth-4 ; # Allows Conreq to log in as an Organizr user auth_request_set $auth_user $upstream_http_x_organizr_user ; proxy_set_header X-WEBAUTH-USER $auth_user ; # Allows Conreq to know the email address of an Organizr user (optional) auth_request_set $auth_email $upstream_http_x_organizr_email ; proxy_set_header X-WEBAUTH-EMAIL $auth_email ; # Allows Conreq to automatically configure Organizr Admins and Co-Admins as Conreq staff members (optional) auth_request_set $auth_group $upstream_http_x_organizr_group ; proxy_set_header X-WEBAUTH-GROUP $auth_group ;","title":"Organizr Authentication"},{"location":"configure/static_files/","text":"Conreq can store and serve any custom files located within your data directory's \"static\" folder. In order to use this to serve custom CSS or JavaScript... Put a CSS/JS file into DATA_DIR/static/ Restart Conreq Set your Conreq \"Custom CSS/JS\" to link to the new content (ex. /static/my_style.css ) Done!","title":"Custom CSS/JS"},{"location":"configure/webserver/","text":"We use Hypercorn as Conreq's production-grade webserver. This webserver can be directly exposed to the internet. For more information beyond what is in this guide, check out the Hypercorn Documentation . The Conreq webserver can be modified through a hypercorn.toml file. Create a hypercorn.toml file within your Conreq data directory (ex. ./Conreq/data/hypercorn.toml ) Populate this toml file with any property in the Hypercorn's documentation . For example... bind = \"0.0.0.0:5357\" h11_max_incomplete_size = 4 keep_alive_timeout = 20 use_reloader = true workers = 20","title":"Built-in Webserver"},{"location":"contrib/apps/","text":"Work in Progress, Conreq app framework is not yet in place. Prerequisites \u00b6 Nothing here but chickens. Listing on the Conreq App Store \u00b6 Nothing here but chickens.","title":"Listing an App"},{"location":"contrib/apps/#prerequisites","text":"Nothing here but chickens.","title":"Prerequisites"},{"location":"contrib/apps/#listing-on-the-conreq-app-store","text":"Nothing here but chickens.","title":"Listing on the Conreq App Store"},{"location":"contrib/docs/","text":"We use MkDocs to create our documentation. For more information beyond what is in this guide, check out the MkDocs Documentation . Setting Up the Environment \u00b6 Install Python 3.8 or greater. Fork and pull Conreq:docs from GitHub. Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type pip install -r requirements.txt to install MkDocs. Starting the Preview Webserver \u00b6 MkDocs contains a tool to allow you to preview your documentation changes live! In order to use it... Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type cd source to enter the documentation's source code directory. Type mkdocs serve to start the preview webserver. Navigate to http://127.0.0.1:8000 to see the documentation and changes live! Adding/Editing a Docs Page \u00b6 Create a new markdown file within source/docs/ , or edit an existing markdown file within this folder. Fill in this file with any markdown text you want! If you made a new file: Add this file to the navigation bar within mkdocs.yml . Contributing Your Changes \u00b6 At this point you've successfully created a new docs page, and determine you want to contribute these changes. In order to do so... Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type cd source to enter the documentation's source code directory. Type mkdocs build -d ..\\docs to turn the preview into something we can use. Commit your changes to your GitHub branch. Submit a GitHub pull request to Archmonger/Conreq:docs .","title":"Updating the Docs"},{"location":"contrib/docs/#setting-up-the-environment","text":"Install Python 3.8 or greater. Fork and pull Conreq:docs from GitHub. Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type pip install -r requirements.txt to install MkDocs.","title":"Setting Up the Environment"},{"location":"contrib/docs/#starting-the-preview-webserver","text":"MkDocs contains a tool to allow you to preview your documentation changes live! In order to use it... Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type cd source to enter the documentation's source code directory. Type mkdocs serve to start the preview webserver. Navigate to http://127.0.0.1:8000 to see the documentation and changes live!","title":"Starting the Preview Webserver"},{"location":"contrib/docs/#addingediting-a-docs-page","text":"Create a new markdown file within source/docs/ , or edit an existing markdown file within this folder. Fill in this file with any markdown text you want! If you made a new file: Add this file to the navigation bar within mkdocs.yml .","title":"Adding/Editing a Docs Page"},{"location":"contrib/docs/#contributing-your-changes","text":"At this point you've successfully created a new docs page, and determine you want to contribute these changes. In order to do so... Open a terminal (ex. Command Prompt or PowerShell) at the root of the repository. Type cd source to enter the documentation's source code directory. Type mkdocs build -d ..\\docs to turn the preview into something we can use. Commit your changes to your GitHub branch. Submit a GitHub pull request to Archmonger/Conreq:docs .","title":"Contributing Your Changes"},{"location":"develop/code_tldr/","text":"This guide is intended to help developers gain an understanding of how the code in Conreq works together to make a functional application. Repository File Structure \u00b6 Path Description manage.py Django development tool (runs the development web server, initialize the databases, and more. misc/ Branding, legal documents, and other miscellaneous files conreq/ Main Django application conreq/core/ All back-end functionality conreq/static/ CSS, JavaScript, and Image files conreq/utils/ Generic functions that may be helpful to use conreq/settings.py Boot-time configuration and settings conreq/urls.py HTTP URLs conreq/asgi.py Websocket URLs conreq/core/websockets/consumers.py Back-end Websockets conreq/static/js/client_websockets.js Front-end websockets Viewport Rendering \u00b6 Viewport rendering is currently being reassessed. These docs will be updated at a later time. Modal Rendering \u00b6 Modal rendering is currently being reassessed. These docs will be updated at a later time. HTTP URL Routing \u00b6 All of the HTTP routing logic will trace back to a views.py file. Within this file we write code render a specific URL address, which is effectively a string containing HTML. Conreq relies on the Django Framework for HTTP URL routing. Here's a high level example of what occurs when the browser visits a URL. The browser visits a Conreq web address Django determines how to handle this URL by comparing the path (let's use the example of /server_settings/ ) with what is contained in conreq/urls.py Django looks at conreq/urls.py at notices it points to include(\"conreq.core.server_settings.urls\") . So, this tells Django there is another file that defines this path, and that file is conreq/core/server_settings/urls.py . Based on the urlpatterns in conreq/core/server_settings/urls.py , Django determines this URL is rendered by a function called views.server_settings . Django runs this function to renders the HTML (known as a Django View ). The webserver determines how to send this view to the browser based on what was returned by the view (ex. a HttpResponse or JsonResponse ) Websockets \u00b6 Websockets can be thought of as the server and browser communicating via chat messages . When the page first loads, a connection to a chat room is formed, and chat bubbles can be communicated back and forth between the server and browser. Chat rooms must exist at a specific URL. The URL they exist at is determined within conreq/asgi.py . In this file, a specific URL is directly linked to a websocket consumer . A websocket consumer is a Python class with a send/receive function, which typically process json data. The data format that gets processed is determined based on your consumer's base class. For example AsyncJsonWebsocketConsumer has send_json() and recieve_json() functions for processing JSON messages. Overriding these functions will be where most of your code will be written when working with websockets. In the situation where the server sends a JSON message via send_json() , it will be processed by the browser's JavaScript websocket client (ex. conreq/static/js/client_websockets.js ) .","title":"Our Code Explained"},{"location":"develop/code_tldr/#repository-file-structure","text":"Path Description manage.py Django development tool (runs the development web server, initialize the databases, and more. misc/ Branding, legal documents, and other miscellaneous files conreq/ Main Django application conreq/core/ All back-end functionality conreq/static/ CSS, JavaScript, and Image files conreq/utils/ Generic functions that may be helpful to use conreq/settings.py Boot-time configuration and settings conreq/urls.py HTTP URLs conreq/asgi.py Websocket URLs conreq/core/websockets/consumers.py Back-end Websockets conreq/static/js/client_websockets.js Front-end websockets","title":"Repository File Structure"},{"location":"develop/code_tldr/#viewport-rendering","text":"Viewport rendering is currently being reassessed. These docs will be updated at a later time.","title":"Viewport Rendering"},{"location":"develop/code_tldr/#modal-rendering","text":"Modal rendering is currently being reassessed. These docs will be updated at a later time.","title":"Modal Rendering"},{"location":"develop/code_tldr/#http-url-routing","text":"All of the HTTP routing logic will trace back to a views.py file. Within this file we write code render a specific URL address, which is effectively a string containing HTML. Conreq relies on the Django Framework for HTTP URL routing. Here's a high level example of what occurs when the browser visits a URL. The browser visits a Conreq web address Django determines how to handle this URL by comparing the path (let's use the example of /server_settings/ ) with what is contained in conreq/urls.py Django looks at conreq/urls.py at notices it points to include(\"conreq.core.server_settings.urls\") . So, this tells Django there is another file that defines this path, and that file is conreq/core/server_settings/urls.py . Based on the urlpatterns in conreq/core/server_settings/urls.py , Django determines this URL is rendered by a function called views.server_settings . Django runs this function to renders the HTML (known as a Django View ). The webserver determines how to send this view to the browser based on what was returned by the view (ex. a HttpResponse or JsonResponse )","title":"HTTP URL Routing"},{"location":"develop/code_tldr/#websockets","text":"Websockets can be thought of as the server and browser communicating via chat messages . When the page first loads, a connection to a chat room is formed, and chat bubbles can be communicated back and forth between the server and browser. Chat rooms must exist at a specific URL. The URL they exist at is determined within conreq/asgi.py . In this file, a specific URL is directly linked to a websocket consumer . A websocket consumer is a Python class with a send/receive function, which typically process json data. The data format that gets processed is determined based on your consumer's base class. For example AsyncJsonWebsocketConsumer has send_json() and recieve_json() functions for processing JSON messages. Overriding these functions will be where most of your code will be written when working with websockets. In the situation where the server sends a JSON message via send_json() , it will be processed by the browser's JavaScript websocket client (ex. conreq/static/js/client_websockets.js ) .","title":"Websockets"},{"location":"develop/creating_apps/","text":"Work in Progress, Conreq app framework is not yet in place. App File Structure \u00b6 Nothing here but chickens. Creating the Base App \u00b6 Nothing here but chickens. Features \u00b6 Nothing here but chickens.","title":"Creating Custom Apps"},{"location":"develop/creating_apps/#app-file-structure","text":"Nothing here but chickens.","title":"App File Structure"},{"location":"develop/creating_apps/#creating-the-base-app","text":"Nothing here but chickens.","title":"Creating the Base App"},{"location":"develop/creating_apps/#features","text":"Nothing here but chickens.","title":"Features"},{"location":"develop/run_conreq/","text":"There are two environments Conreq can exist in: Development and Production . If you intend to edit Conreq's code, then proceed with the Development instructions. Creating a Development Environment \u00b6 Software Required \u00b6 Install Python 3.8+ (Easiest if this is the only version of python on your computer) If using Windows : Install Visual Studio C++ (Within this installer, navigate to C++ Build Tools . Select MSVC and Windows 10 SDK ) Optional : Install Visual Studio Code (Any editor would work) Setting Up the Environment \u00b6 Pull the repository from GitHub. Open a terminal (ex. Command Prompt or PowerShell) as administrator at the root of the repository. If using Windows Type set-executionpolicy remotesigned and select Yes to All to allow external Python scripts to run on your computer. Type python -m venv venv to create a Python virtual environment called \"venv\". Type ./venv/Scripts/activate to enter the virtual environment. Type pip install -r requirements.txt to install all Python dependencies within the virtual environment. Type python manage.py run_conreq to run the webserver. Creating a Production Environment \u00b6 Follow all instructions laid out within Creating a Development Environment , but before running python manage.py run_conreq do the following: Set your environment variable of DEBUG to false . The method of doing this will vary based on operating system . Doing this enables a lot of security features that are mandatory for any user environment. The webserver is conifgured with good defaults for most cases, but if you want to configure the webserver (such as changing ports) See our webserver documentation for more information. Optional: Visual Studio Code Configuration \u00b6 VS Code Extensions \u00b6 GitHub GitLens Python MagicPython VS Code Settings \u00b6 If your terminal does not show (venv) ... , type ./venv/Scripts/activate . Type pip install -r requirements_dev.txt to install VS Code editor packages within the virtual environment. Enable Python Formatting Settings -> Editor: Format On Save -> ON Settings -> Python Formatting Provider -> Black Enabling Python Linting Ctrl+Shift+P -> Python: Select Linter -> pylint Settings -> Linting: Pylint Args -> Add Item -> --disable=line-too-long,bare-except,bad-continuation","title":"Running Conreq Manually"},{"location":"develop/run_conreq/#creating-a-development-environment","text":"","title":"Creating a Development Environment"},{"location":"develop/run_conreq/#software-required","text":"Install Python 3.8+ (Easiest if this is the only version of python on your computer) If using Windows : Install Visual Studio C++ (Within this installer, navigate to C++ Build Tools . Select MSVC and Windows 10 SDK ) Optional : Install Visual Studio Code (Any editor would work)","title":"Software Required"},{"location":"develop/run_conreq/#setting-up-the-environment","text":"Pull the repository from GitHub. Open a terminal (ex. Command Prompt or PowerShell) as administrator at the root of the repository. If using Windows Type set-executionpolicy remotesigned and select Yes to All to allow external Python scripts to run on your computer. Type python -m venv venv to create a Python virtual environment called \"venv\". Type ./venv/Scripts/activate to enter the virtual environment. Type pip install -r requirements.txt to install all Python dependencies within the virtual environment. Type python manage.py run_conreq to run the webserver.","title":"Setting Up the Environment"},{"location":"develop/run_conreq/#creating-a-production-environment","text":"Follow all instructions laid out within Creating a Development Environment , but before running python manage.py run_conreq do the following: Set your environment variable of DEBUG to false . The method of doing this will vary based on operating system . Doing this enables a lot of security features that are mandatory for any user environment. The webserver is conifgured with good defaults for most cases, but if you want to configure the webserver (such as changing ports) See our webserver documentation for more information.","title":"Creating a Production Environment"},{"location":"develop/run_conreq/#optional-visual-studio-code-configuration","text":"","title":"Optional: Visual Studio Code Configuration"},{"location":"develop/run_conreq/#vs-code-extensions","text":"GitHub GitLens Python MagicPython","title":"VS Code Extensions"},{"location":"develop/run_conreq/#vs-code-settings","text":"If your terminal does not show (venv) ... , type ./venv/Scripts/activate . Type pip install -r requirements_dev.txt to install VS Code editor packages within the virtual environment. Enable Python Formatting Settings -> Editor: Format On Save -> ON Settings -> Python Formatting Provider -> Black Enabling Python Linting Ctrl+Shift+P -> Python: Select Linter -> pylint Settings -> Linting: Pylint Args -> Add Item -> --disable=line-too-long,bare-except,bad-continuation","title":"VS Code Settings"}]}